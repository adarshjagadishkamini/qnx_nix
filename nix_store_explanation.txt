QNX Nix Store Package Installation Process
========================================

1. Directory Structure
------------------------
/data/nix/                   # Base directory
├── store/                   # Content-addressed store
│   ├── <hash>-package/     # Individual packages
│   │   ├── bin/           # Executables
│   │   └── lib/           # Libraries
│   └── .nix-db/           # Package database
└── profiles/               # User environments
    ├── test1/             # Named profile
    │   ├── bin/          # Wrapper scripts
    │   └── lib/          # Library symlinks
    ├── test1-<timestamp> # Generation backup
    └── current -> test1  # Current profile

2. Installation Process
------------------------
a) Store Addition:
   1. Compute hash from name and dependencies
   2. Create store directory (<hash>-name)
   3. Create bin/ and lib/ subdirectories
   4. Copy files to appropriate directories
   5. Make store path read-only
   6. Register in database with dependencies

b) Profile Installation:
   1. Create profile directory structure
   2. Generate wrapper scripts for binaries
   3. Create symlinks for libraries
   4. Back up existing profile as generation
   5. Register profile as GC root

3. Wrapper Script Example
------------------------
#!/bin/sh
# Wrapper for executable
# Save original state
ORIG_PWD="$(pwd)"
ORIG_LD_LIBRARY_PATH="$LD_LIBRARY_PATH"

# Resolve script and profile paths
SCRIPT_DIR="$(dirname "$0")"
PROFILE_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"
PROFILE_LIB="$PROFILE_DIR/lib"

# Execute target with clean environment
cd "$ORIG_PWD"
exec env - \
    PATH="$PATH" \
    PWD="$ORIG_PWD" \
    HOME="$HOME" \
    USER="$USER" \
    TERM="$TERM" \
    LD_LIBRARY_PATH="$PROFILE_LIB" \
    '/data/nix/store/<hash>-pkg/bin/program' "$@"

4. Dependency Management
------------------------
- Use ldd to scan for library dependencies
- Map system/boot libraries to store paths
- Register dependencies in database
- Track for garbage collection
- Handle both /proc/boot and /system/bin

5. Profile Generations
------------------------
- Create full copy on each change
- Use timestamps for version tracking
- Keep previous generations for rollback
- Allow switching between generations
- Clean environment per generation

6. Garbage Collection
------------------------
- Start from profile roots
- Follow dependency links
- Mark reachable packages
- Remove unreachable items
- Preserve all active profiles

7. Shell Environments
------------------------
- Isolated per profile
- Limited PATH access
- Clean environment
- Profile-specific libraries
- Essential utils from store

8. Key Features
------------------------
- Content-addressed storage
- Atomic profile updates
- Multiple versions coexist
- Clean uninstallation
- Reliable rollbacks

9. Common Operations
------------------------
a) Adding Package:
   ./qnix-store --add-with-deps /path/to/binary name

b) Creating Profile:
   ./nix-store --create-profile name

c) Installing to Profile:
   ./nix-store --install store-path profile-name

d) Entering Shell:
   ./nix-shell-qnx profile-name

e) Rolling Back:
   ./nix-store --rollback profile-name

10. Execution Flow
------------------------
1. User runs profile command
2. Wrapper script executes
3. Environment is cleaned
4. LD_LIBRARY_PATH is set
5. Store binary is executed
6. Libraries load from store

11. Common Issues
------------------------
- Missing boot libraries: Run --add-boot-libs
- Profile creation: Check store permissions
- Library paths: Verify wrapper script
- Shell environment: Check PATH setup
- Generation backups: Verify timestamps
- Set date at each boot for generations to work as intended
```
